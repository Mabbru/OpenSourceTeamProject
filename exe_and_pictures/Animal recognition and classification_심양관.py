# -*- coding: utf-8 -*-
"""Untitled16.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1xY_GgJgRTkR_xjJWUGz_FZSsyqZ6-Irc
"""

pip install tensorflow opencv-python

import cv2
import tensorflow as tf
from tensorflow.keras.preprocessing import image
from tensorflow.keras.applications.inception_v3 import InceptionV3
from tensorflow.keras.applications.inception_v3 import preprocess_input, decode_predictions
from google.colab.patches import cv2_imshow
import numpy as np

# 얼굴 감지를 위한 Haarcascades 분류기 로드
face_cascade = cv2.CascadeClassifier(cv2.data.haarcascades + 'haarcascade_frontalface_default.xml')

# 동물 얼굴 분류를 위한 InceptionV3 모델 로드
model = InceptionV3(weights='imagenet')

# 이미지 파일 읽기
frame = cv2.imread('./puppies.jpg')

# 그레이 스케일로 변환
gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)

# 얼굴 감지
faces = face_cascade.detectMultiScale(gray, scaleFactor=1.1, minNeighbors=5, minSize=(30, 30))

for (x, y, w, h) in faces:
    # 얼굴 영역 자르기
    face_img = frame[y:y + h, x:x + w]

    # 이미지 크기 조정 및 전처리
    face_img = cv2.resize(face_img, (299, 299))
    img_array = image.img_to_array(face_img)
    img_array = np.expand_dims(img_array, axis=0)
    img_array = preprocess_input(img_array)

    # 동물 얼굴 분류
    predictions = model.predict(img_array)

    # 예측 결과 출력
    label = decode_predictions(predictions)
    cv2.putText(frame, f'Animal: {label[0][0][1]}', (x, y - 10), cv2.FONT_HERSHEY_SIMPLEX, 0.9, (0, 255, 0), 2)

    # 얼굴 주변에 사각형 그리기
    cv2.rectangle(frame, (x, y), (x + w, y + h), (255, 0, 0), 2)

# 이미지 출력
cv2_imshow(frame)

# 이미지 출력 후 아무 키나 누르면 창 닫기
cv2.waitKey(0)
cv2.destroyAllWindows()
